# -*- coding: utf-8 -*-
"""Fadilla_Proyek Analisis Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RhDQ3uD4OlwGHnUoBBraEwNGBu-eAlZQ

# Proyek Analisis Data: [Input Nama Dataset]
- **Nama:** Fadilla
- **Email:** fadillafdila@gmail.com
- **ID Dicoding:** fadilla_fdila

## Menentukan Pertanyaan Bisnis

- Apa kategori produk terlaris berdasarkan jumlah barang yang terjual, dan bagaimana distribusinya pada setiap kategori?
- Bagaimana sebaran ulasan pelanggan terhadap pesanan berdasarkan rating, dan apakah ada hubungan antara rating ulasan dan jumlah barang dalam pesanan?

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""*italicized text*## Data Wrangling

### Gathering Data
"""

from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive
import pandas as pd

# Hubungkan Colab ke Google Drive
drive.mount('/content/drive')

# Path file CSV di Google Drive
file_path = '/content/drive/My Drive/E-commerce-public-dataset/customers_dataset.csv'

# Membaca file CSV
customers_df = pd.read_csv(file_path)
print(customers_df.head())

file_path = '/content/drive/My Drive/E-commerce-public-dataset/geolocation_dataset.csv'
geolocation_df = pd.read_csv(file_path)
print(geolocation_df.head())

file_path = '/content/drive/My Drive/E-commerce-public-dataset/orders_dataset.csv'
orders_df = pd.read_csv(file_path)
print(orders_df.head())

file_path = '/content/drive/My Drive/E-commerce-public-dataset/order_items_dataset.csv'
order_items_df = pd.read_csv(file_path)
print(order_items_df.head())

file_path = '/content/drive/My Drive/E-commerce-public-dataset/order_payments_dataset.csv'
order_payments_df = pd.read_csv(file_path)
print(order_payments_df.head())

file_path = '/content/drive/My Drive/E-commerce-public-dataset/order_reviews_dataset.csv'
order_reviews_df = pd.read_csv(file_path)
print(order_reviews_df.head())

file_path = '/content/drive/My Drive/E-commerce-public-dataset/products_dataset.csv'
products_dataset_df = pd.read_csv(file_path)
print(products_dataset_df.head())


file_path = '/content/drive/My Drive/E-commerce-public-dataset/product_category_name_translation.csv'
product_category_name_translation_df = pd.read_csv(file_path)
print(product_category_name_translation_df.head())

file_path = '/content/drive/My Drive/E-commerce-public-dataset/sellers_dataset.csv'
sellers_df = pd.read_csv(file_path)
print(sellers_df.head())

"""**Insight:**
-  sebagian besar pelanggan berasal dari kota-kota besar seperti SÃ£o Paulo (SP). Hal ini menunjukkan bahwa wilayah perkotaan besar memiliki potensi pasar yang lebih besar dalam e-commerce.Hal ini dapat membantu strategi pemasaran dan logistik dengan memberikan fokus lebih pada wilayah-wilayah dengan konsentrasi pelanggan yang tinggi.
- Data dari geolocation_dataset.csv memberikan koordinat geografis pelanggan (latitude dan longitude). Informasi ini dapat digunakan untuk Menganalisis wilayah dengan tingkat permintaan yang tinggi untuk perencanaan gudang atau cabang distribusi baru.

### Assessing Data
"""

customers_df.info()
print("Jumlah duplikasi: ", customers_df.duplicated().sum())
customers_df.describe()

geolocation_df.info()
print("Jumlah duplikasi: ", geolocation_df.duplicated().sum())
geolocation_df.describe()

orders_df.info()
print("Jumlah duplikasi: ", orders_df.duplicated().sum())
orders_df.describe()

order_items_df.info()
print("Jumlah duplikasi: ", order_items_df.duplicated().sum())
order_items_df.describe()

order_payments_df.info()
print("Jumlah duplikasi: ", order_payments_df.duplicated().sum())
order_payments_df.describe()

order_reviews_df.info()
print("Jumlah duplikasi: ", order_reviews_df.duplicated().sum())
order_reviews_df.describe()

order_reviews_df.info()
print("Jumlah duplikasi: ", order_reviews_df.duplicated().sum())
order_reviews_df.describe()

products_dataset_df.info()
print("Jumlah duplikasi: ", products_dataset_df.duplicated().sum())
products_dataset_df.describe()

product_category_name_translation_df.info()
print("Jumlah duplikasi: ", product_category_name_translation_df.duplicated().sum())
product_category_name_translation_df.describe()

sellers_df.info()
print("Jumlah duplikasi: ", sellers_df.duplicated().sum())
sellers_df.describe()

"""**Insight:**
- Pada  geolocation_df terdapat 261831 duplikas. Lokasi geografis memiliki banyak entri berulang, yang mungkin berasal dari area yang sama dengan beberapa koordinat berdekatan
- Jumlah baris pada products_df ada 32.951, tetapi hanya 32.341 yang memiliki data lengkap terkait deskripsi produk.Ada produk tanpa deskripsi lengkap, yang dapat mengindikasikan informasi produk yang tidak optimal.

### Cleaning Data
"""

geolocation_df.drop_duplicates(inplace=True)
print("Jumlah duplikasi: ", geolocation_df.duplicated().sum())

orders_df[orders_df.order_approved_at.isna()]
orders_df.order_approved_at.value_counts()
orders_df['order_approved_at'] = orders_df['order_approved_at'].fillna(orders_df['order_purchase_timestamp'])
orders_df = orders_df.dropna(
    subset=['order_delivered_carrier_date', 'order_delivered_customer_date']
)

orders_df.isna().sum()

"""**Insight:**
- Missing values yang terdapat pada order_approved_at dapat diatasi dengan engisi missing values pada 'order_approved_at' dengan 'order_purchase_timestamp'
- duplikasi yang terdapat pada geolocation_df bertujuan untuk mengurangi ukuran data tanpa kehilangan informasi penting

## Exploratory Data Analysis (EDA)

### Explore ...
"""

customers_df.groupby(by="status").customer_id.count()

customers_df[customers_df.status == "Non Active"]

orders_customers_df = pd.merge(
    left=orders_df,
    right=customers_df,
    how="left",
    left_on="customer_id",
    right_on="customer_id"
)
orders_customers_df.head()

orders_customers_df.groupby(by="customer_city").order_id.nunique().sort_values(ascending=False).head(10)

orders_customers_df.groupby(by="customer_state").order_id.nunique().sort_values(ascending=False).head(10)

products_dataset_df.sample(10)

products_dataset_df.describe(include="all")

products_dataset_df.describe(include="all")
sellers_df.describe(include="all")

sellers_df.sample(5)

sellers_df.describe(include="all")

#Explorasi customers_df
customers_df.describe(include="all")
customers_df.groupby(by="customer_city").customer_id.nunique().sort_values(ascending=False)
customers_df.groupby(by="customer_state").customer_id.nunique().sort_values(ascending=False)


# Eksplorasi orders_df
orders_df["order_delivered_customer_date"] = pd.to_datetime(orders_df["order_delivered_customer_date"])
orders_df["order_purchase_timestamp"] = pd.to_datetime(orders_df["order_purchase_timestamp"])

# Hitung waktu pengiriman (delivery_time) dalam hari
orders_df["delivery_time"] = (orders_df["order_delivered_customer_date"] - orders_df["order_purchase_timestamp"]).dt.total_seconds() / 86400

# Bulatkan waktu pengiriman
orders_df["delivery_time"] = orders_df["delivery_time"].round()

# Tampilkan beberapa data
print(orders_df[["order_id", "order_purchase_timestamp", "order_delivered_customer_date", "delivery_time"]].head())
orders_df.describe(include="all")
orders_df.delivery_time.hist()

customer_id_in_orders_df =  orders_df.customer_id.tolist()
customers_df["status"] = customers_df["customer_id"].apply(lambda x: "Active" if x in customer_id_in_orders_df else "Non Active")
customers_df.sample(5)

"""**Insight:**
- Berdasarkan hasil tersebut didaptkan bahwa pelanggan paling banyak dari sau Paulo yaitu sebanyak 41746
- xxx

## Visualization & Explanatory Analysis

### Pertanyaan 1:
"""

order_items_products = pd.merge(order_items_df, products_dataset_df, on='product_id', how='inner')

# Tambahkan nama kategori dalam bahasa Inggris
order_items_products = pd.merge(
    order_items_products,
    product_category_name_translation_df,
    on="product_category_name",
    how="left"
)

# Hitung total jumlah barang terjual per kategori
category_sales = order_items_products.groupby("product_category_name_english")["order_item_id"].count().reset_index()
category_sales.rename(columns={"order_item_id": "total_sold"}, inplace=True)

# Urutkan berdasarkan jumlah barang terjual
category_sales = category_sales.sort_values(by="total_sold", ascending=False)

# Visualisasi
plt.figure(figsize=(12, 6))
sns.barplot(
    data=category_sales.head(10),
    x="total_sold",
    y="product_category_name_english",
    palette="viridis"
)
plt.title("Top 10 Kategori Produk Terlaris")
plt.xlabel("Jumlah Barang Terjual")
plt.ylabel("Kategori Produk")
plt.show()

"""### Pertanyaan 2:"""

# Gabungkan order_reviews dengan order_items
reviews_items = pd.merge(order_reviews_df, order_items_df, on="order_id", how="inner")

# Distribusi rating ulasan
plt.figure(figsize=(10, 5))
sns.countplot(data=order_reviews_df, x="review_score", palette="coolwarm")
plt.title("Distribusi Rating Ulasan")
plt.xlabel("Rating")
plt.ylabel("Jumlah Ulasan")
plt.show()

# Hubungan antara rating dan jumlah barang
reviews_items_grouped = reviews_items.groupby("review_score")["order_item_id"].mean().reset_index()
reviews_items_grouped.rename(columns={"order_item_id": "avg_items"}, inplace=True)

# Visualisasi
plt.figure(figsize=(10, 5))
sns.barplot(data=reviews_items_grouped, x="review_score", y="avg_items", palette="coolwarm")
plt.title("Rata-rata Jumlah Barang vs Rating Ulasan")
plt.xlabel("Rating")
plt.ylabel("Rata-rata Jumlah Barang")
plt.show()

"""**Insight:**
- xxx
- xxx

## Analisis Lanjutan (Opsional)
"""

# Persiapkan data untuk RFM Analysis
rfm_data = pd.merge(orders_df, order_items_df, on="order_id", how="inner")
rfm_data = pd.merge(rfm_data, order_payments_df, on="order_id", how="inner")

# Recency
rfm_data["order_purchase_timestamp"] = pd.to_datetime(rfm_data["order_purchase_timestamp"])
last_order_date = rfm_data["order_purchase_timestamp"].max()
rfm = rfm_data.groupby("customer_id").agg({
    "order_purchase_timestamp": lambda x: (last_order_date - x.max()).days,  # Recency
    "order_id": "count",  # Frequency
    "payment_value": "sum"  # Monetary
}).reset_index()

rfm.columns = ["customer_id", "recency", "frequency", "monetary"]

# Kategorisasi RFM
rfm["R_Score"] = pd.qcut(rfm["recency"], 4, labels=[4, 3, 2, 1])
rfm["F_Score"] = pd.qcut(rfm["frequency"].rank(method="first"), 4, labels=[1, 2, 3, 4])
rfm["M_Score"] = pd.qcut(rfm["monetary"], 4, labels=[1, 2, 3, 4])

# Segmentasi
rfm["RFM_Segment"] = rfm["R_Score"].astype(str) + rfm["F_Score"].astype(str) + rfm["M_Score"].astype(str)

# Visualisasi
plt.figure(figsize=(10, 6))
sns.countplot(data=rfm, x="RFM_Segment", palette="cool")
plt.title("Distribusi Segmentasi Pelanggan Berdasarkan RFM")
plt.xlabel("RFM Segment")
plt.ylabel("Jumlah Pelanggan")
plt.xticks(rotation=90)
plt.show()

"""## Conclusion

- Conclution pertanyaan 1
- Conclution pertanyaan 2
"""